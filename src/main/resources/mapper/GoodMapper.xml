<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.demo.learn.dao.GoodMapper">
    <resultMap id="BaseResultMap" type="com.demo.learn.model.Good">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="good_name" property="goodName" jdbcType="VARCHAR"/>
        <result column="store" property="store" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, 
        good_name, 
        store, 
        create_time, 
        update_time
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="Integer">
        select
        <include refid="Base_Column_List"/>
        from good
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="Integer" >
        delete from good
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.demo.learn.model.Good" >
        insert into good (
        id, 
        good_name, 
        store, 
        create_time, 
        update_time
        )
        values (
        #{id,jdbcType=INTEGER}, 
        #{goodName,jdbcType=VARCHAR}, 
        #{store,jdbcType=INTEGER}, 
        #{createTime,jdbcType=TIMESTAMP}, 
        #{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.demo.learn.model.Good" >
        insert into good
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="goodName != null" >
                good_name,
            </if>
            <if test="store != null" >
                store,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER}, 
            </if>
            <if test="goodName != null" >
                #{goodName,jdbcType=VARCHAR}, 
            </if>
            <if test="store != null" >
                #{store,jdbcType=INTEGER}, 
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP}, 
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP}, 
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKey" parameterType="com.demo.learn.model.Good" >
        update good
        set good_name = #{goodName,jdbcType=VARCHAR}, 
          store = #{store,jdbcType=INTEGER}, 
          create_time = #{createTime,jdbcType=TIMESTAMP}, 
          update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.demo.learn.model.Good" >
        update good
        <set>
            <if test="goodName != null" >
                good_name = #{goodName,jdbcType=VARCHAR},
            </if>
            <if test="store != null" >
                store = #{store,jdbcType=INTEGER},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <select id="getGoodList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from good
    </select>
    <select id="getGoodStore" resultMap="BaseResultMap">
        select id, good_name, store from good where good_name = #{goodName}
    </select>
    <update id="resetStore" parameterType="integer">
        update good set store = #{store}
    </update>
</mapper>